"""Streamlit web app serving the Python package CLI readmeai."""

import logging
import subprocess
import tempfile
from typing import List

import streamlit as st

from cli import app_settings, build_command

logging.basicConfig(level=logging.INFO)


def init_session_state() -> None:
    """Initialize session state variables if they don't exist or reset them."""
    if (
        "readme_generated" not in st.session_state
        or not st.session_state.readme_generated
    ):
        st.session_state.readme_generated = False
    if "readme_content" not in st.session_state:
        st.session_state.readme_content = ""
        


def execute_command(command: List[str]) -> None:
    """Execute the command and handle its output."""
    with st.spinner("Generating README.md file..."):
        process = subprocess.Popen(
            command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
        )

        output_container = st.empty()
        stderr_accumulated = ""

        while True:
            stderr_line = process.stderr.readline()
            if stderr_line:
                stderr_accumulated += stderr_line
                output_container.text_area(
                    "Output log generated by readme-ai",
                    value=stderr_accumulated,
                    height=100,
                )
            if process.poll() is not None:
                break

    output_container.empty()

    return process.returncode, stderr_accumulated


def main(output_path: str) -> None:
    """Main function for the Streamlit web app for README-AI."""
    st.set_page_config(
        page_title="README-AI",
        page_icon="assets/logo.png",
        layout="centered",
        initial_sidebar_state="expanded",
    )
    with st.sidebar:
        st.image("images/logo.png", width=150)
        st.title("README-AI")
        st.markdown(
            """
            ## üîó :blue[Resources]
            - [Readme-ai @ PyPI](https://pypi.org/project/readmeai/)
            - [Readme-ai @ GitHub](https://github.com/eli64s/readme-ai)
            - [Readme-ai @ Docker Hub](https://hub.docker.com/r/zeroxeli/readme-ai)
            """,
            unsafe_allow_html=True,
        )

    init_session_state()

    (
        api_key,
        header_alignment,
        project_logo,
        repo_path,
        badge_style,
        use_emojis,
        run_offline,
        generate_readme,
        max_tokens,
        model,
        temperature,
        # template,
        # language,
    ) = app_settings()

    if generate_readme:
        command = build_command(
            repo_path,
            output_path,
            api_key,
            use_emojis,
            badge_style,
            project_logo,
            header_alignment,
            max_tokens,
            model,
            run_offline,
            temperature,
        )
        try:
            status, stderr_output = execute_command(command)

            if status == 0:
                st.balloons()
                st.success("‚úÖ README.md file generated successfully.")

                with open(output_path) as file:
                    readme_content = file.read()

                st.session_state.readme_generated = True
                st.session_state.readme_content = readme_content

                if st.session_state.readme_generated:
                    with st.expander("Preview File"), open(
                        output_path
                    ) as file:
                        readme_content = file.read()
                        st.markdown(readme_content, unsafe_allow_html=True)

                        st.session_state.readme_generated = True
                        st.session_state.readme_content = readme_content

                    with st.expander("Download File"), open(
                        output_path, "rb"
                    ) as file:
                        st.download_button(
                            label=":rainbow[README-AI.md]",
                            data=file,
                            file_name="README-AI.md",
                            mime="text/markdown",
                        )

                    with st.expander("Copy Markdown"):
                        st.write("Copy the markdown below to your clipboard.")
                        st.code(
                            st.session_state.readme_content,
                            language="markdown",
                        )

            else:
                st.error(
                    f"Error occurred while generating README.md file:\n{stderr_output}"
                )
                st.write(
                    "Please try again or report the error on our [GitHub repo!](https://github.com/eli64s/readme-ai-streamlit/issues)."
                )

        except (Exception, subprocess.CalledProcessError) as exc:
            logging.error(f"An error occurred: {exc}")
            st.error(f"‚ùå README generation failed.\nError: {str(exc)}")


if __name__ == "__main__":
    with tempfile.NamedTemporaryFile(
        suffix=".md", mode="w+", delete=False
    ) as tmpfile:
        main(tmpfile.name)
